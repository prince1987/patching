---
- name: Patch and reboot servers
  hosts: all
  become: true
  tasks:
    - name: upgrade packages via yum
      yum:
        name: "*"
        state: latest
      become: "yes"
      register: yumcommandout
      when:
        - (ansible_facts['distribution_major_version'] == '7') or
          (ansible_facts['distribution_major_version'] == '8')

    - name: Print errors if yum failed
      debug:
        msg: "yum command produced errors"
      when: yumcommandout is not defined
      
    - name: check if reboot required after kernel update.
      shell: KERNEL_NEW=$(rpm -q --last kernel | head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi
      register: machine_reboot
    
    - name: if kernel is updated and reboot is not required
      debug: 
        msg: "reboot is not required"
      when: machine_reboot.stdout == "reboot_not_needed"
      ignore_errors: true 

    - name: if kernel is updated during the this patching and reboot is required
      debug: 
        msg: "reboot is required"
      when: machine_reboot.stdout == "reboot_needed"
      ignore_errors: true  
         
      
    - name: Reboot Server if Necessary
      command: shutdown -r now "Ansible Updates Triggered"
      become: true
      async: 30
      poll: 0
      when: machine_reboot.stdout == "reboot_needed"

    # This pause is mandatory, otherwise the existing control connection
    # gets reused!
    - name: Pausing to allow server to shutdown and terminate our SSH connection
      pause: seconds=30
      when: machine_reboot.stdout == "reboot_needed"

    - name: Wait for reboot to complete and SSH to become available
      local_action: wait_for host={{ inventory_hostname }} port=22
        state=started delay=30 timeout=600
      retries: 30
      delay: 10
      when: machine_reboot.stdout == "reboot_needed"
    - name: it will check the kernel is updated or not.
      shell: New_kernel=$(uname -r);if [[ $(rpm -qa --last kernel|head -1|awk '{print $1}' | sed 's/kernel-//') == $New_kernel ]];then echo 'system_updated';else echo 'system_not_updated';fi
      ignore_errors: true
      register: system_ok
    - name: Print system status
      debug:
        msg: "System Patched with Latest Kernel"       
      when: system_ok.stdout == "system_updated"
      ignore_errors: true
    - debug:
        msg: "System not Patched during this Play"
      when: system_ok.stdout == "system_not_updated"         
      ignore_errors: true
